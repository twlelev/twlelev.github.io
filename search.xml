<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>deeplearning</title>
      <link href="/2023/04/25/deeplearning/"/>
      <url>/2023/04/25/deeplearning/</url>
      
        <content type="html"><![CDATA[<p><img src="/videos/score_rl.mp4"></p><iframe src="视频或者网页路径" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height=600 width=800> </iframe>]]></content>
      
      
      <categories>
          
          <category> deeplearning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gfootball </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 简介</title>
      <link href="/2023/04/21/hexo-jian-jie/"/>
      <url>/2023/04/21/hexo-jian-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="1-什么是Hexo"><a href="#1-什么是Hexo" class="headerlink" title="1.什么是Hexo?"></a>1.什么是Hexo?</h1><p>Hexo是一个快速、简洁且高效的静态博客框架，使用Node.js编写，支持Markdown语法和EJS模板引擎。</p><h1 id="2-Hexo常用命令"><a href="#2-Hexo常用命令" class="headerlink" title="2.Hexo常用命令"></a>2.Hexo常用命令</h1><blockquote><ul><li>hexo clean：清除缓存文件</li><li>hexo g  :生成静态文件，即将Markdown文件生成为HTML文件。</li><li>hexo s  :启动本地服务器，用于本地浏览。</li><li>hexo d  :部署博客，将静态文件上传到远程服务器或者GitHub Pages.</li><li>hexo new post “article” :新建一篇名为article的文章。</li><li>hexo new page “title”：用于新建一个空的页面，相当于生成一个文件夹并在文件夹里面有一个初始md文件。</li><li>hexo init：新建博客，相当于初始化一个Hexo博客demo，需要空文件夹下执行该命令。</li></ul></blockquote><h1 id="3-简述Hexo构建流程"><a href="#3-简述Hexo构建流程" class="headerlink" title="3.简述Hexo构建流程"></a>3.简述Hexo构建流程</h1><p>该部分只对hexo搭建个人博客所需环境以及步骤列个目录，具体详情参见<a href="https://zhuanlan.zhihu.com/p/35668237">这里</a>。</p><h3 id="所需环境与步骤"><a href="#所需环境与步骤" class="headerlink" title="所需环境与步骤"></a>所需环境与步骤</h3><blockquote><ul><li>安装Node.js</li><li>安装Git</li><li>注册Github账号</li><li>安装Hexo</li><li>连接Github与本地</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git commit 规范</title>
      <link href="/2023/04/17/git/git-commit-gui-fan/"/>
      <url>/2023/04/17/git/git-commit-gui-fan/</url>
      
        <content type="html"><![CDATA[<h1 id="commit-message格式"><a href="#commit-message格式" class="headerlink" title="commit message格式"></a>commit message格式</h1><p>&lt;type&gt;(&lt;scope&gt;):&lt;subject&gt;  即：&lt;commit类型&gt;(影响范围)：具体描述</p><p>举例 fix(DOA):fixed invalid user table indexes.</p><p>type:指明git commit的类别， 应该使用下面的类型</p><blockquote><ul><li>【feat】:新增功能</li><li>【fix】:修复bug</li><li>【docs】:仅仅修改了文档， 比如README，CHANGELOG等等</li><li>【test】:增加&#x2F;修改测试用例，包括单元测试、集成测试等</li><li>【style】:修改了空行、缩进格式、引用包排序等等（不改变代码逻辑）</li><li>【perf】:优化相关内容，比如提升性能、体验、算法等</li><li>【refactor】:重构代码，没有新功能或者bug修复</li><li>【chore】:改变构建流程、或者增加依赖库、工具等</li><li>【revert】:回滚到上一个版本</li><li>【merge】:代码合并</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux chmod用法</title>
      <link href="/2023/04/17/linux/linux-chmod-yong-fa/"/>
      <url>/2023/04/17/linux/linux-chmod-yong-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="1-查看文件夹权限"><a href="#1-查看文件夹权限" class="headerlink" title="1.查看文件夹权限"></a>1.查看文件夹权限</h1><p>通过命令ll 或者 ls -l 查看当前路径下各个文件或者文件夹权限，如下图所示：<br><img src="/images/linux1.jpg" alt="avatar"><br>其中开头固定10个字符，其字符意义表示如下：</p><blockquote><ul><li>第1个字符：表示该文件的类型，可以是d(目录)、b(块设备)、c(字符设备文件)、“-”(普通文件)、“l”(链接文件)等。</li><li>第2-4个字符：表示该文件的属主用户(user)对该文件的访问权限。</li><li>第5-7个字符：表示该文件的属组内各成员用户对该文件的访问权限。</li><li>第8-10个字符：表示其它任何用户(Other)对该文件的访问权限。</li></ul></blockquote><p>其中r+w+x &#x3D; 4+2+1, r权限表示可以读取文件的内容，w权限表示可以编辑或者修改文件，x(execute)权限表示可以执行文件（只有可执行文件才有x权限)，比如在当前文件夹下mkdir一个新的文件夹或者touch 一个新文件需要x执行权限。</p><h1 id="2-更改权限"><a href="#2-更改权限" class="headerlink" title="2.更改权限"></a>2.更改权限</h1><pre><code>chmod -R 777 uploads: 更改当前路径下的uploads文件夹权限。补充：ls -ll：查看当前路径下所有文件以及文件夹大小，展示的是字节数。ls -lh：查看当前路径下所有文件以及文件夹大小，以KB、MB等为单位进行展  示。</code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传git仓库</title>
      <link href="/2023/04/13/git/git-shang-chuan-ben-di-cang-ku-dao-yuan-cheng-cang-ku/"/>
      <url>/2023/04/13/git/git-shang-chuan-ben-di-cang-ku-dao-yuan-cheng-cang-ku/</url>
      
        <content type="html"><![CDATA[<p>上传git仓库：<br>1.首先需要通过 $git init 初始化本地仓库，即需要cd 到需要上传仓库的目录下，使用当前目录作为Git仓库，也可以指定目录作为Git仓库 $git init reponame</p><p>2.在本地仓库中添加内容 git add （可以是文件也可以是文件夹）git add README.md  or git add .   </p><p>3.提交到本地仓库$git commit -m “提交说明”.                                   </p><p>4.完成上述步骤后，即完成了本地仓库的提交，我们需要将其Push到远程仓库。  </p><p>5.首先设置提交代码时的用户信息：</p><blockquote><ul><li>$ git config –global user.name “name”  </li><li>$ git config –global user.email “emai”</li></ul></blockquote><p>6.连接github与本地       </p><blockquote><ul><li>命令行输入：ssh-keygen　　</li><li>得到生成的密钥：cat  ~&#x2F;.ssh&#x2F;id_rsa.pub</li><li>将密钥在github中进行配置：打开github，在头像下边的settings里面找到SSH and GPG keys，新建SSH，随便取个名字，并将上面得到的密钥粘贴进去。</li><li>通过命令查看本地与github是否连接成功：ssh -T <a href="mailto:&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;">&#x67;&#x69;&#x74;&#x40;&#x67;&#x69;&#116;&#104;&#117;&#x62;&#x2e;&#x63;&#111;&#109;</a></li></ul><p>　　　　　　</p></blockquote><p>7.将远程仓库链接</p><blockquote><ul><li>git remote add origin <a href="https://github.com/">https://github.com/</a>…..</li></ul></blockquote><p>8.创建分支 </p><blockquote><p>git branch -M main  </p></blockquote><p>9.将本地仓库push到远程仓库 </p><blockquote><p>git push origin main  </p></blockquote><p>当出现推送失败“hint”的时候，可以强制推送上去。例如，更改远程仓库的名字后，本地仓库的内容将无法推送上去，可以通过-f强制推送，如：git push origin main -f<br>_</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
